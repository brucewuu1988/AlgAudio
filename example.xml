<collection version="1" id="example">
  <name>Example module collection</name>
  <defaultdll>example.dll</defaultdll>
  
  <!-- A basic module that has some SC code, and basic controls -->
  <module id="mix2" name="2-channel Mixer">
    <category>Mixers</category>
    <parrams>
      <parram id="in1" type="inlet"/>
      <parram id="in2" type="inlet"/>
      <parram id="gain1" type="float" min="0.0" max="4.0" default="1.0"/>
      <parram id="gain2" type="float" min="0.0" max="10.0" default="1.0"/>
      <parram id="out1" type="outlet"/>
    </parrams>
    <sc>
arg in1, in2, out1, gain1, gain2;
var i1 = In.ar(inbus1);
var i2 = In.ar(inbus2);
var res = Mix.new([i1*gain1, i2*gain2]);
Out.ar(outbus,res);
    </sc>
    <!-- The `type` argument to the gui parram specifies which top-level module
      container element to use. This may vary if we implement different module
      gui shapes -->
    <gui type="standard">
        <inlet id="in1"/>
        <inlet id="in2"/>
        <slider id="gain1" name="Gain 1" type="lin"/>
        <slider id="gain2" name="Gain 2" type="lin"/>
        <outlet id="out1"/>
    </gui>
  </module>
  
  <!-- Another very simple module. This time the GUI is build automatically
    basing on the parrams list. Note additional data in parram nodes. This
    is only a shorter form that can be used if the GUI is based only on the 
    parrams.-->
  <module id="echo" name="Simple echo">
    <category>Delays</category>
    <parrams>
      <parram id="in1" type="inlet"/>
      <!-- Slider type could be omitted, as lin is the default value.-->
      <parram id="delay" type="float" min="0.0" max="4.0" default="1.0" slider_name="Delay time" slider_type="lin"/>
      <parram id="decay" type="float" min="0.0" max="10.0" default="1.0" slider_name="Decay to -60dB" slider_type="lin"/>
      <parram id="out1" type="outlet"/>
    </parrams>
    <sc>
arg in1, out1, delay = 0.2, decay = 4;
var input = In.ar(in1);
Out.ar(in1, CombN.ar(input, 0.5, delay, decay, 1, input));
    </sc>
    <gui type="standard" mode="auto"/>
  </module>
  
  <!-- This module has a class associated; it will be loaded from the shared
    library, so that arbitrary binary code may be executed -->
  <module id="display" name="Data display">
    <category>Debug</category>
    <class name="DisplayModule"/>
    <parrams>
      <!-- Standard inlets pass audio signals, data inlets pass control
        signals. -->
      <parram id="in1" type="datainlet"/>
      <parram id="enabled" type="bool" default="false">
        <!-- This specifies that any in-app changes to this parram should be
          passed to the custom source-->
        <reactfunc type="custom"/>
      </parram>
    </parrams>
    <gui type="standard">
      <inlet id="in1"/>
      <toggle id="enabled"/>
      <!-- The placeholder GUI element does not display anything, but can be 
        accessed by the module code and have a custom element embedded. This
        way modules may perform custom drawing. -->
      <placeholder id="drawarea" width="50" height="50"/>
    </gui>
  </module>
  
</collection>
